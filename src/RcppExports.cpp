// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// approximate_pseudo_octave
double approximate_pseudo_octave(const Rcpp::NumericVector& ratios, const double uncertainty);
RcppExport SEXP _mami_codi_beaty_R_approximate_pseudo_octave(SEXP ratiosSEXP, SEXP uncertaintySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type ratios(ratiosSEXP);
    Rcpp::traits::input_parameter< const double >::type uncertainty(uncertaintySEXP);
    rcpp_result_gen = Rcpp::wrap(approximate_pseudo_octave(ratios, uncertainty));
    return rcpp_result_gen;
END_RCPP
}
// approximate_rational_fractions
DataFrame approximate_rational_fractions(NumericVector& x, const double uncertainty);
RcppExport SEXP _mami_codi_beaty_R_approximate_rational_fractions(SEXP xSEXP, SEXP uncertaintySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type uncertainty(uncertaintySEXP);
    rcpp_result_gen = Rcpp::wrap(approximate_rational_fractions(x, uncertainty));
    return rcpp_result_gen;
END_RCPP
}
// compute_amplitude_modulation
DataFrame compute_amplitude_modulation(NumericVector& frequency, NumericVector& amplitude);
RcppExport SEXP _mami_codi_beaty_R_compute_amplitude_modulation(SEXP frequencySEXP, SEXP amplitudeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type frequency(frequencySEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type amplitude(amplitudeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_amplitude_modulation(frequency, amplitude));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mami_codi_beaty_R_approximate_pseudo_octave", (DL_FUNC) &_mami_codi_beaty_R_approximate_pseudo_octave, 2},
    {"_mami_codi_beaty_R_approximate_rational_fractions", (DL_FUNC) &_mami_codi_beaty_R_approximate_rational_fractions, 2},
    {"_mami_codi_beaty_R_compute_amplitude_modulation", (DL_FUNC) &_mami_codi_beaty_R_compute_amplitude_modulation, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_mami_codi_beaty_R(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
