// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_pseudo_octave
const double compute_pseudo_octave(const double ratio_n, const double ratio_0, const int n);
RcppExport SEXP _mami_codi_R_compute_pseudo_octave(SEXP ratio_nSEXP, SEXP ratio_0SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type ratio_n(ratio_nSEXP);
    Rcpp::traits::input_parameter< const double >::type ratio_0(ratio_0SEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pseudo_octave(ratio_n, ratio_0, n));
    return rcpp_result_gen;
END_RCPP
}
// approximate_harmonics
DataFrame approximate_harmonics(const NumericVector x, const double deviation);
RcppExport SEXP _mami_codi_R_approximate_harmonics(SEXP xSEXP, SEXP deviationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type deviation(deviationSEXP);
    rcpp_result_gen = Rcpp::wrap(approximate_harmonics(x, deviation));
    return rcpp_result_gen;
END_RCPP
}
// pseudo_octave
const double pseudo_octave(NumericVector approximate_harmonics);
RcppExport SEXP _mami_codi_R_pseudo_octave(SEXP approximate_harmonicsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type approximate_harmonics(approximate_harmonicsSEXP);
    rcpp_result_gen = Rcpp::wrap(pseudo_octave(approximate_harmonics));
    return rcpp_result_gen;
END_RCPP
}
// approximate_rational_fractions
DataFrame approximate_rational_fractions(NumericVector x, const double uncertainty, const double deviation);
RcppExport SEXP _mami_codi_R_approximate_rational_fractions(SEXP xSEXP, SEXP uncertaintySEXP, SEXP deviationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type uncertainty(uncertaintySEXP);
    Rcpp::traits::input_parameter< const double >::type deviation(deviationSEXP);
    rcpp_result_gen = Rcpp::wrap(approximate_rational_fractions(x, uncertainty, deviation));
    return rcpp_result_gen;
END_RCPP
}
// compute_sidebands_wavelength
DataFrame compute_sidebands_wavelength(NumericVector wavelength, NumericVector amplitude);
RcppExport SEXP _mami_codi_R_compute_sidebands_wavelength(SEXP wavelengthSEXP, SEXP amplitudeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type wavelength(wavelengthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type amplitude(amplitudeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_sidebands_wavelength(wavelength, amplitude));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mami_codi_R_compute_pseudo_octave", (DL_FUNC) &_mami_codi_R_compute_pseudo_octave, 3},
    {"_mami_codi_R_approximate_harmonics", (DL_FUNC) &_mami_codi_R_approximate_harmonics, 2},
    {"_mami_codi_R_pseudo_octave", (DL_FUNC) &_mami_codi_R_pseudo_octave, 1},
    {"_mami_codi_R_approximate_rational_fractions", (DL_FUNC) &_mami_codi_R_approximate_rational_fractions, 3},
    {"_mami_codi_R_compute_sidebands_wavelength", (DL_FUNC) &_mami_codi_R_compute_sidebands_wavelength, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_mami_codi_R(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
